const data = $input.first().json;

if (!data.topProducts || !data.dailySales || !data.sortedDates || !data.categoryStats) {
  throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö node "Process Sales Data"');
}

// --- Top Products Bar Chart ---
const topProducts = data.topProducts.slice(0,10);
const barChartConfig = {
  type: 'bar',
  data: {
    labels: topProducts.map(([name]) => name),
    datasets: [{
      label: '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)',
      data: topProducts.map(([, stats]) => stats.revenue),
      backgroundColor: 'rgba(54, 162, 235, 0.8)',
      borderColor: 'rgba(54, 162, 235, 1)',
      borderWidth: 2
    }]
  },
  options: {
    responsive: true,
    plugins: { legend: { display: false }, title: { display: true, text: 'üìä Top 10 ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ', font:{size:20}, color:'#333' } },
    layout: { padding: 20 },
    scales: {
      y: { beginAtZero: true, ticks:{callback: v=>v.toLocaleString('th-TH')+' ‡∏ø'}, grid:{color:'rgba(0,0,0,0.1)'} },
      x: { ticks:{maxRotation:45,minRotation:45}, grid:{display:false} }
    }
  }
};

// --- Last 14 days Line Chart ---
const lastDates = data.sortedDates.slice(-14);
const lastSales = lastDates.map(d => data.dailySales[d] || 0);

const lineChartConfig = {
  type: 'line',
  data: { labels:lastDates, datasets:[{
    label:'‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏ö‡∏≤‡∏ó)',
    data:lastSales,
    fill:true,
    backgroundColor:'rgba(75,192,192,0.2)',
    borderColor:'rgba(75,192,192,1)',
    borderWidth:3,
    tension:0.4,
    pointRadius:5,
    pointBackgroundColor:'rgba(75,192,192,1)',
    pointBorderColor:'#fff',
    pointBorderWidth:2,
    pointHoverRadius:7
  }]},
  options:{
    responsive:true,
    plugins:{ legend:{display:false}, title:{display:true,text:'üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ 14 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î', font:{size:20}, color:'#333'}},
    layout:{padding:20},
    scales:{ y:{beginAtZero:true,ticks:{callback:v=>v.toLocaleString('th-TH')+' ‡∏ø'},grid:{color:'rgba(0,0,0,0.1)'}}, x:{grid:{color:'rgba(0,0,0,0.1)'}} }
  }
};

// --- Category Pie Chart ---
const pieChartLabels = Object.keys(data.categoryStats);
const pieChartData = Object.values(data.categoryStats);
const colors = ['rgba(255,99,132,0.8)','rgba(54,162,235,0.8)','rgba(255,206,86,0.8)','rgba(75,192,192,0.8)','rgba(153,102,255,0.8)','rgba(255,159,64,0.8)','rgba(231,233,237,0.8)','rgba(255,99,255,0.8)'];

const pieChartConfig = {
  type:'pie',
  data:{labels:pieChartLabels,datasets:[{data:pieChartData, backgroundColor: colors.slice(0,pieChartLabels.length), borderColor:'#fff', borderWidth:2}]},
  options:{responsive:true,plugins:{legend:{display:true,position:'right'},title:{display:true,text:'üç∞ ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà',font:{size:20},color:'#333'}},layout:{padding:50}}
};

// --- Generate URLs ---
const baseUrl = 'https://quickchart.io/chart';
const width = 800, height = 500;

return [{
  json:{
    ...data,
    barChartUrl: `${baseUrl}?width=${width}&height=${height}&backgroundColor=white&c=${encodeURIComponent(JSON.stringify(barChartConfig))}`,
    lineChartUrl: `${baseUrl}?width=${width}&height=${height}&backgroundColor=white&c=${encodeURIComponent(JSON.stringify(lineChartConfig))}`,
    pieChartUrl: `${baseUrl}?width=${width}&height=${height}&backgroundColor=white&c=${encodeURIComponent(JSON.stringify(pieChartConfig))}`,
    chartGenerated:true
  }
}];
